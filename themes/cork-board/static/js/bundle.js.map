{
  "version": 3,
  "sources": ["../ts/components/cork-board.ts", "../ts/components/board-item.ts", "../ts/shared/tack.ts", "../ts/components/polaroid-card.ts", "../ts/components/note-paper.ts", "../ts/components/tack-pin.ts", "../ts/components/profile-card.ts", "../ts/components/tack-scatter.ts"],
  "sourcesContent": ["class CorkBoardEl extends HTMLElement {\n  constructor() {\n    super();\n    const shadowRoot = this.attachShadow({ mode: \"open\" });\n    shadowRoot.innerHTML = `\n      <style>\n        :host { display: block; position: relative; z-index: 1; min-height: 90vh; }\n        .container {\n          display: flex;\n          flex-wrap: wrap;\n          gap: 100px; /* Increased gap for better spacing */\n          justify-content: center;\n          align-items: space-around;\n          padding: 3rem;\n        }\n\n        /* Responsive scale-down to preserve visible frame edges */\n        @media (max-width: 768px) {\n          .container { padding: 2rem 1rem; gap: 28px; }\n          :host { display: block; }\n          .container { transform: scale(0.92); transform-origin: top center; }\n        }\n        @media (max-width: 480px) {\n          .container { padding: 1.25rem 0.5rem; gap: 20px; }\n          .container { transform: scale(0.86); }\n        }\n      </style>\n      <div class=\"container\">\n        <slot></slot>\n      </div>\n    `;\n  }\n}\ncustomElements.define(\"cork-board\", CorkBoardEl);\n\n", "class BoardItemEl extends HTMLElement {\n  constructor() {\n    super();\n    // Apply styles directly for encapsulation\n    this.style.display = \"block\";\n    this.style.transition = \"transform 0.2s ease-in-out, z-index 0s 0.1s\";\n  }\n\n  connectedCallback() {\n    // Generate a random rotation between -4 and 4 degrees\n    const randomRotation = Math.random() * 8 - 4;\n    this.style.transform = `rotate(${randomRotation}deg)`;\n\n    this.addEventListener(\"mouseenter\", () => {\n      this.style.transform = `rotate(${randomRotation}deg) scale(1.05) translateY(-5px)`;\n      this.style.zIndex = \"10\";\n    });\n    this.addEventListener(\"mouseleave\", () => {\n      this.style.transform = `rotate(${randomRotation}deg) scale(1)`;\n      this.style.zIndex = \"1\";\n    });\n  }\n}\ncustomElements.define(\"board-item\", BoardItemEl);\n", "// Shared tack utilities: color mapping and SVG generation\n\nexport const TACK_COLOR_MAP: Record<string, string> = {\n  red: \"#ef4444\",\n  blue: \"#3b82f6\",\n  green: \"#22c55e\",\n  yellow: \"#eab308\",\n  purple: \"#a855f7\",\n};\n\n/**\n * Resolve a tack color string to a fill hex, with a sensible default.\n */\nexport function tackFill(\n  color: string | null | undefined,\n  defaultColor: keyof typeof TACK_COLOR_MAP = \"green\"\n): string {\n  const key = (color || \"\").toLowerCase();\n  return TACK_COLOR_MAP[key] || TACK_COLOR_MAP[defaultColor];\n}\n\n/**\n * Build the SVG markup string for a tack with the given fill color.\n * Optionally add a class attribute for component-level styling hooks.\n */\nexport function buildTackSVG(fill: string, className?: string): string {\n  const cls = className ? ` class=\"${className}\"` : \"\";\n  // A slightly taller pushpin: round head, short neck, and a metallic needle\n  // Note: keep shadows via CSS filters in each component to avoid duplicate SVG filter IDs.\n  return `\n    <svg${cls} viewBox=\"0 0 24 28\" aria-hidden=\"true\">\n      <g>\n        <!-- head -->\n        <circle cx=\"12\" cy=\"8\" r=\"6\" fill=\"${fill}\" />\n        <!-- rim highlight -->\n        <circle cx=\"12\" cy=\"8\" r=\"6.8\" fill=\"none\" stroke=\"rgba(0,0,0,0.18)\" stroke-width=\"0.8\" />\n        <!-- neck -->\n        <rect x=\"10\" y=\"13.2\" width=\"4\" height=\"3.2\" rx=\"1.2\" fill=\"${fill}\" />\n        <!-- needle (slight gradient via stroke opacity) -->\n        <path d=\"M12 16.4 L12 26\" stroke=\"#9aa1a8\" stroke-width=\"1.4\" stroke-linecap=\"round\" />\n        <path d=\"M12 16.4 L12 26\" stroke=\"#6b7280\" stroke-width=\"0.6\" stroke-linecap=\"round\" />\n      </g>\n    </svg>\n  `;\n}\n", "import { tackFill, buildTackSVG } from \"../shared/tack\";\n\nclass PolaroidCardEl extends HTMLElement {\n  static get observedAttributes() { return [\"pin\", \"tack\"]; }\n\n  private shadow: ShadowRoot;\n\n  constructor() {\n    super();\n    this.shadow = this.attachShadow({ mode: \"open\" });\n    this.render();\n  }\n\n  attributeChangedCallback() {\n    this.render();\n  }\n\n  private render() {\n    const pin = (this.getAttribute(\"pin\") || \"top\").toLowerCase();\n    const showPin = pin !== \"none\";\n    const tackColor = tackFill(this.getAttribute(\"tack\"), \"red\");\n\n    this.shadow.innerHTML = `\n      <style>\n        :host {\n          display: block;\n          width: 220px;\n          color: inherit;\n          text-decoration: none;\n          will-change: transform;\n        }\n        .frame {\n          background: #fff;\n          border-radius: 6px;\n          box-shadow: 0 8px 16px rgba(0,0,0,0.15);\n          padding: 12px 12px 48px 12px;\n          position: relative;\n        }\n        .tack { position: absolute; top: -8px; left: 50%; transform: translateX(-50%); display: ${showPin ? \"block\" : \"none\"}; }\n        .tack svg { width: 18px; height: 26px; filter: drop-shadow(0 3px 3px rgba(0,0,0,0.3)); }\n        .image {\n          width: 100%;\n          height: 160px;\n          background: #e8e8e8;\n          border: 1px solid #d0d0d0;\n          display: block;\n          overflow: hidden;\n        }\n        ::slotted(img[slot=\"image\"]) {\n          width: 100%;\n          height: 100%;\n          object-fit: cover;\n          display: block;\n        }\n        .caption {\n          margin-top: 12px;\n          text-align: center;\n          font-family: 'Courier New', monospace;\n          font-size: 1rem;\n          color: #222;\n        }\n      </style>\n      <div class=\"frame\">\n        <span class=\"tack\" aria-hidden=\"true\">${buildTackSVG(tackColor)}</span>\n        <div class=\"image\">\n          <slot name=\"image\"></slot>\n        </div>\n        <div class=\"caption\">\n          <slot name=\"caption\"></slot>\n        </div>\n      </div>\n    `;\n  }\n}\n\ncustomElements.define(\"polaroid-card\", PolaroidCardEl);\n", "import { tackFill, buildTackSVG } from \"../shared/tack\";\n\nclass NotePaperEl extends HTMLElement {\n  constructor() {\n    super();\n    this.attachShadow({ mode: \"open\" });\n  }\n\n  static get observedAttributes() {\n    return [\"thumbtack\", \"variant\"];\n  }\n\n  connectedCallback() {\n    this.render();\n  }\n\n  attributeChangedCallback() {\n    this.render();\n  }\n\n  private render() {\n    const tackType = this.getAttribute(\"thumbtack\") || \"green\";\n    const variant = (this.getAttribute(\"variant\") || \"note\").toLowerCase();\n    const fill = tackFill(tackType, \"green\");\n    const tackSVG = buildTackSVG(fill, \"tack\");\n\n    if (!this.shadowRoot) return;\n\n    const isSheet = variant === \"sheet\";\n    const hostBase = `\n      display: block;\n      position: relative;\n      padding: 2.5rem 1.5rem 1.5rem 1.5rem;\n      box-shadow: 0 4px 10px rgba(0,0,0,0.2);\n      width: ${isSheet ? \"320px\" : \"280px\"};\n      ${isSheet\n        ? `background: linear-gradient(180deg, rgba(255,255,255,0.95), rgba(255,255,240,0.98));\n           border-radius: 6px;\n           border: 1px solid rgba(0,0,0,0.08);\n           /* ruled lines */\n           background-image:\n             linear-gradient(180deg, rgba(255,255,255,0.95), rgba(255,255,240,0.98)),\n             repeating-linear-gradient(180deg, transparent 0 22px, rgba(0,0,0,0.06) 22px 23px);\n           background-blend-mode: normal;\n           background-size: 100% 100%, 100% 23px;`\n        : `background-color: #fdf5e6;\n           /* torn edge */\n           clip-path: polygon(0% 0%, 100% 0%, 100% 85%, 95% 100%, 0% 95%);`}\n    `;\n\n    this.shadowRoot.innerHTML = `\n      <style>\n        :host { ${hostBase} }\n        .tack {\n          position: absolute;\n          top: -10px;\n          left: 50%;\n          transform: translateX(-50%);\n          width: 22px;\n          height: 28px;\n          z-index: 10;\n          filter: drop-shadow(0 3px 4px rgba(0,0,0,0.35));\n        }\n        .content {\n          font-family: 'Courier New', monospace, sans-serif;\n          color: #333;\n        }\n        ::slotted(h3) {\n          margin-top: 0;\n          font-size: 1.35rem;\n          border-bottom: 1px solid #ddd;\n          padding-bottom: 0.5rem;\n        }\n        ::slotted(ul) {\n          padding-left: 1.2rem;\n          line-height: 1.6;\n          margin: 0.25rem 0 0;\n        }\n        ::slotted(li) { margin: 0.1rem 0; }\n        ::slotted(a) { color: inherit; text-decoration: none; }\n        ::slotted(a:hover) { text-decoration: underline; }\n      </style>\n      ${tackSVG}\n      <div class=\"content\">\n        <slot></slot>\n      </div>\n    `;\n  }\n}\ncustomElements.define(\"note-paper\", NotePaperEl);\n", "import { tackFill, buildTackSVG } from \"../shared/tack\";\n\nclass TackPinEl extends HTMLElement {\n  static get observedAttributes() { return [\"color\"]; }\n\n  private shadow: ShadowRoot;\n\n  constructor() {\n    super();\n    this.shadow = this.attachShadow({ mode: \"open\" });\n    this.render();\n  }\n\n  attributeChangedCallback() {\n    this.render();\n  }\n\n  private render() {\n    const fill = tackFill(this.getAttribute(\"color\"), \"green\");\n    this.shadow.innerHTML = `\n      <style>\n        :host { position: absolute; top: -10px; left: 50%; transform: translateX(-50%); z-index: 10; display: block; }\n        svg { width: 22px; height: 28px; filter: drop-shadow(0 3px 4px rgba(0,0,0,0.35)); }\n      </style>\n      ${buildTackSVG(fill)}\n    `;\n  }\n}\n\ncustomElements.define(\"tack-pin\", TackPinEl);\n", "import { tackFill, buildTackSVG } from \"../shared/tack\";\n\nclass ProfileCardEl extends HTMLElement {\n  static get observedAttributes() { return [\"tack\"]; }\n\n  private shadow: ShadowRoot;\n\n  constructor() {\n    super();\n    this.shadow = this.attachShadow({ mode: \"open\" });\n    this.render();\n  }\n\n  attributeChangedCallback() {\n    this.render();\n  }\n\n  private render() {\n    const tackColor = tackFill(this.getAttribute(\"tack\"), \"red\");\n    this.shadow.innerHTML = `\n      <style>\n        :host { display: block; width: 340px; color: inherit; text-decoration: none; }\n        .card {\n          position: relative;\n          background: #fff;\n          border-radius: 8px;\n          border: 1px solid rgba(0,0,0,0.08);\n          box-shadow: 0 8px 16px rgba(0,0,0,0.15);\n          padding: 16px 16px 18px 16px;\n          display: grid;\n          grid-template-columns: 100px 1fr;\n          grid-gap: 14px;\n        }\n        .tack { position: absolute; top: -12px; left: 50%; transform: translateX(-50%); }\n          .tack svg { width: 20px; height: 28px; filter: drop-shadow(0 3px 4px rgba(0,0,0,0.35)); }\n\n        .avatar {\n          width: 100px; height: 100px;\n          background: #eee;\n          border: 1px solid #d0d0d0;\n          border-radius: 6px;\n          display: block;\n        }\n        ::slotted(img[slot=\"avatar\"]) { width: 100%; height: 100%; object-fit: cover; display: block; border-radius: 6px; }\n\n        .info { display: flex; flex-direction: column; justify-content: center; }\n        .name { font-family: \"Fleur De Leah\", cursive; font-weight: 400; font-size: 2rem; line-height: 1.1; margin: 0 0 0.25rem 0; }\n        .subtitle { font-size: 0.95rem; color: #555; }\n\n        @media (max-width: 480px) {\n          :host { width: 300px; }\n          .card { grid-template-columns: 84px 1fr; }\n          .avatar { width: 84px; height: 84px; }\n          .name { font-size: 1.75rem; }\n        }\n      </style>\n      <div class=\"card\">\n        <span class=\"tack\" aria-hidden=\"true\">${buildTackSVG(tackColor)}</span>\n        <div class=\"avatar\">\n          <slot name=\"avatar\"></slot>\n        </div>\n        <div class=\"info\">\n          <div class=\"name\"><slot name=\"name\"></slot></div>\n          <div class=\"subtitle\"><slot name=\"subtitle\"></slot></div>\n        </div>\n      </div>\n    `;\n  }\n}\n\ncustomElements.define(\"profile-card\", ProfileCardEl);\n", "import { tackFill, buildTackSVG } from \"../shared/tack\";\n\n/**\n * <tack-scatter> renders a few decorative tacks around the edges of\n * its box (like real corkboard pins). It does not intercept clicks on the host,\n * only on the pins themselves. Use it as a child\n * inside the corkboard surface for ambient decor.\n *\n * Attributes:\n * - count: number of tacks (default 3)\n * - max: optional upper bound for count (default 24)\n * - colors: comma-separated list from the tack color map (e.g., \"red,blue\")\n * - seed: optional integer for deterministic positions\n * - placement: \"edge\" (default) or \"random\"\n * - inset: percent inset from the container edge (default 2.5)\n * - jitter: percent jitter along the edge direction (default 2)\n * - distribute: \"even\" (default) or \"random\" along the perimeter\n */\nclass TackScatterEl extends HTMLElement {\n  private shadow: ShadowRoot;\n  constructor() {\n    super();\n    this.shadow = this.attachShadow({ mode: \"open\" });\n  }\n\n  static get observedAttributes() { return [\"count\", \"max\", \"colors\", \"seed\", \"layer\", \"placement\", \"inset\", \"jitter\", \"distribute\"]; }\n\n  connectedCallback() { this.render(); }\n  attributeChangedCallback() { this.render(); }\n\n  private seededRandom(seed: number) {\n    // Simple LCG for determinism\n    let s = seed >>> 0;\n    return () => {\n      s = (1664525 * s + 1013904223) >>> 0;\n      return s / 0xffffffff;\n    };\n  }\n\n  private render() {\n    const max = Math.max(1, parseInt(this.getAttribute(\"max\") || \"24\", 10) || 24);\n    const count = Math.max(1, Math.min(max, parseInt(this.getAttribute(\"count\") || \"3\", 10) || 3));\n    const colorList = (this.getAttribute(\"colors\") || \"red,blue,green,yellow,purple\")\n      .split(\",\")\n      .map(s => s.trim())\n      .filter(Boolean);\n    const seedAttr = this.getAttribute(\"seed\");\n    const rand = seedAttr ? this.seededRandom(parseInt(seedAttr, 10) || 1) : Math.random;\n\n    const placement = (this.getAttribute(\"placement\") || \"edge\").toLowerCase();\n    const insetPct = Math.max(0, Math.min(10, parseFloat(this.getAttribute(\"inset\") || \"2.5\")));\n    const jitterPct = Math.max(0, Math.min(20, parseFloat(this.getAttribute(\"jitter\") || \"2\")));\n    const distribute = (this.getAttribute(\"distribute\") || \"even\").toLowerCase();\n\n    const map = (val: number, inMin: number, inMax: number, outMin: number, outMax: number) =>\n      outMin + (outMax - outMin) * ((val - inMin) / (inMax - inMin));\n\n    const makeEdgePoint = (t: number) => {\n      // t in [0,1): walk perimeter: top (L->R), right (T->B), bottom (R->L), left (B->T)\n      const inset = insetPct;\n      const innerMin = inset;\n      const innerMax = 100 - inset;\n      const seg = t * 4;\n      const segIdx = Math.floor(seg);\n      const segT = seg - segIdx;\n      const jitter = (rand() - 0.5) * 2 * jitterPct;\n      let x = 50, y = 50;\n      if (segIdx === 0) { x = map(segT, 0, 1, innerMin, innerMax) + jitter; y = innerMin; }\n      else if (segIdx === 1) { x = innerMax; y = map(segT, 0, 1, innerMin, innerMax) + jitter; }\n      else if (segIdx === 2) { x = map(segT, 0, 1, innerMax, innerMin) + jitter; y = innerMax; }\n      else { x = innerMin; y = map(segT, 0, 1, innerMax, innerMin) + jitter; }\n      x = Math.max(innerMin, Math.min(innerMax, x));\n      y = Math.max(innerMin, Math.min(innerMax, y));\n      return { x, y };\n    };\n\n    const pins = Array.from({ length: count }).map((_, i) => {\n      let x: number, y: number;\n      if (placement === \"edge\") {\n        const t = distribute === \"even\" ? (i + 0.5) / count : rand();\n        const pt = makeEdgePoint(t);\n        x = pt.x; y = pt.y;\n      } else {\n        x = 8 + rand() * 84; // margin from edges\n        y = 6 + rand() * 88;\n      }\n      const rot = (rand() - 0.5) * 18; // small rotation\n      const color = colorList[Math.floor(rand() * colorList.length)] || \"green\";\n      const fill = tackFill(color, \"green\");\n      const svg = buildTackSVG(fill);\n      return `<div class=\"pin\" style=\"left:${x}%; top:${y}%; transform: translate(-50%, -50%) rotate(${rot}deg);\">${svg}</div>`;\n    }).join(\"\");\n\n    this.shadow.innerHTML = `\n      <style>\n        /* Default: sit under the board content */\n        :host { position: absolute; inset: 0; pointer-events: none; display: block; z-index: 0; }\n        /* Opt-in to layer above by setting layer=\"over\" */\n        :host([layer=\"over\"]) { z-index: 1000; }\n        :host([layer=\"under\"]) { z-index: 0; }\n        .pin { position: absolute; filter: drop-shadow(0 3px 4px rgba(0,0,0,0.35)); pointer-events: auto; }\n        .pin svg { width: 18px; height: 26px; }\n      </style>\n      ${pins}\n    `;\n\n    // Add click-to-reposition handlers on each pin\n    const pinsEls = this.shadow.querySelectorAll<HTMLElement>(\".pin\");\n    pinsEls.forEach((el) => {\n      el.addEventListener(\"click\", (ev) => {\n        ev.stopPropagation();\n        // Reposition this one pin respecting placement\n        let x: number, y: number;\n        if ((this.getAttribute(\"placement\") || \"edge\").toLowerCase() === \"edge\") {\n          const t = rand();\n          const pt = makeEdgePoint(t);\n          x = pt.x; y = pt.y;\n        } else {\n          x = 8 + rand() * 84;\n          y = 6 + rand() * 88;\n        }\n        const rot = (rand() - 0.5) * 18;\n        el.style.left = `${x}%`;\n        el.style.top = `${y}%`;\n        el.style.transform = `translate(-50%, -50%) rotate(${rot}deg)`;\n      }, { passive: true });\n    });\n  }\n}\n\ncustomElements.define(\"tack-scatter\", TackScatterEl);\n"],
  "mappings": "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",
  "names": []
}
